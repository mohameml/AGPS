# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import pricing_pb2 as pricing__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in pricing_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GrpcPricerStub(object):
    """Définition du service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PriceAndDeltas = channel.unary_unary(
                '/grpc_pricer.GrpcPricer/PriceAndDeltas',
                request_serializer=pricing__pb2.PricingInput.SerializeToString,
                response_deserializer=pricing__pb2.PricingOutput.FromString,
                _registered_method=True)
        self.HelloWorld = channel.unary_unary(
                '/grpc_pricer.GrpcPricer/HelloWorld',
                request_serializer=pricing__pb2.Empty.SerializeToString,
                response_deserializer=pricing__pb2.ReqInfo.FromString,
                _registered_method=True)


class GrpcPricerServicer(object):
    """Définition du service
    """

    def PriceAndDeltas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HelloWorld(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GrpcPricerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PriceAndDeltas': grpc.unary_unary_rpc_method_handler(
                    servicer.PriceAndDeltas,
                    request_deserializer=pricing__pb2.PricingInput.FromString,
                    response_serializer=pricing__pb2.PricingOutput.SerializeToString,
            ),
            'HelloWorld': grpc.unary_unary_rpc_method_handler(
                    servicer.HelloWorld,
                    request_deserializer=pricing__pb2.Empty.FromString,
                    response_serializer=pricing__pb2.ReqInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_pricer.GrpcPricer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('grpc_pricer.GrpcPricer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GrpcPricer(object):
    """Définition du service
    """

    @staticmethod
    def PriceAndDeltas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpc_pricer.GrpcPricer/PriceAndDeltas',
            pricing__pb2.PricingInput.SerializeToString,
            pricing__pb2.PricingOutput.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HelloWorld(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpc_pricer.GrpcPricer/HelloWorld',
            pricing__pb2.Empty.SerializeToString,
            pricing__pb2.ReqInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
