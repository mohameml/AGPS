
// ====== Fichier : ./App.css ======

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


// ====== Fichier : ./index.css ======

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply antialiased text-gray-900;
  }
}

@layer components {
  .btn {
    @apply px-4 py-2 rounded-lg transition-colors;
  }

  .btn-primary {
    @apply bg-blue-600 text-white hover:bg-blue-700;
  }

  .btn-secondary {
    @apply bg-gray-800 text-white hover:bg-gray-900;
  }

  .input {
    @apply px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500;
  }
}

// ====== Fichier : ./main.jsx ======

import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.jsx';
import './index.css';

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>
);

if (process.env.NODE_ENV === 'development') {
  import('./mock-server/browser').then(({ worker }) => {
    worker.start()
  })
}

// ====== Fichier : ./App.jsx ======

import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import { Header } from './components/Header';
import { Sidebar } from './components/Sidebar';
import { Portfolio } from './pages/Portfolio';
import { MarketInfo } from './pages/MarketInfo';
import { Client } from './pages/Client';
import { Info } from './pages/Info';

function App() {
  return (
    <BrowserRouter>
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50">
        <Header />
        <div className="flex">
          <Sidebar />
          <main className="flex-1 p-8">
            <div className="max-w-7xl mx-auto">
              <Routes>
                <Route path="/" element={<Portfolio />} />
                <Route path="/market" element={<MarketInfo />} />
                <Route path="/client" element={<Client />} />
                <Route path="/info" element={<Info />} />
              </Routes>
            </div>
          </main>
        </div>
      </div>
    </BrowserRouter>
  );
}

export default App;

// ====== Fichier : ./vite-env.d.ts ======

/// <reference types="vite/client" />


// ====== Fichier : ./pages/Portfolio.jsx ======

import React, { useState, useEffect } from 'react';
import { DateSelector } from '../components/DateSelector';
import { PortfolioTable } from '../components/PortfolioTable';
import { Stats } from '../components/Stats';
import { api } from '../lib/api';

export function Portfolio() {
  const [date, setDate] = useState('2009-01-05');
  const [portfolioData, setPortfolioData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    async function fetchData() {
      try {
        setLoading(true);
        const response = await api.getPortfolio(date);
        setPortfolioData(response.portfolio.data || []);
        setError(null);
      } catch (err) {
        setError('Failed to fetch portfolio data');
        console.error('Error:', err);
      } finally {
        setLoading(false);
      }
    }

    fetchData();
  }, [date]);

  const handleDateChange = (newDate) => {
    setDate(newDate);
  };

  return (
    <div className="space-y-6">
      <DateSelector date={date} onDateChange={handleDateChange} />
      {error && (
        <div className="bg-red-50 text-red-600 p-4 rounded-lg">
          {error}
        </div>
      )}
      {loading ? (
        <div className="text-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading portfolio data...</p>
        </div>
      ) : (
        <>
          <PortfolioTable data={portfolioData} currentDate={date} />
          <Stats date={date} />
        </>
      )}
    </div>
  );
}

// ====== Fichier : ./pages/Info.jsx ======

import React from 'react';
import { Info as InfoIcon, Book, HelpCircle, Mail } from 'lucide-react';

export function Info() {
  return (
    <div className="space-y-6">
      <div className="flex items-center space-x-3 mb-6">
        <InfoIcon className="w-6 h-6 text-blue-600" />
        <h1 className="text-2xl font-bold text-gray-900">Product Information</h1>
      </div>

      <div className="bg-white rounded-xl shadow-sm border border-blue-100 p-6">
        <div className="prose max-w-none">
          <h2 className="flex items-center text-xl font-semibold mb-4">
            <Book className="w-5 h-5 mr-2 text-blue-600" />
            About This Platform
          </h2>
          <p className="text-gray-600">
            This portfolio management platform provides real-time market data and sophisticated tools
            for managing investment portfolios. It features advanced analytics, automated rebalancing,
            and comprehensive reporting capabilities.
          </p>

          <h3 className="flex items-center text-lg font-semibold mt-6 mb-4">
            <HelpCircle className="w-5 h-5 mr-2 text-blue-600" />
            Key Features
          </h3>
          <ul className="list-disc pl-6 text-gray-600">
            <li>Real-time portfolio tracking and analytics</li>
            <li>Automated portfolio rebalancing</li>
            <li>Market data integration</li>
            <li>Performance reporting and analysis</li>
            <li>Risk management tools</li>
          </ul>

          <h3 className="flex items-center text-lg font-semibold mt-6 mb-4">
            <Mail className="w-5 h-5 mr-2 text-blue-600" />
            Support
          </h3>
          <p className="text-gray-600">
            For technical support or questions about the platform, please contact our support team:
            <br />
            Email: support@example.com
            <br />
            Phone: +33 1 23 45 67 89
          </p>
        </div>
      </div>
    </div>
  );
}

// ====== Fichier : ./pages/MarketInfo.jsx ======

import React from 'react';
import { LineChart, TrendingUp, TrendingDown } from 'lucide-react';

export function MarketInfo() {
  const marketData = [
    {
      name: 'Eurostoxx 50',
      value: '4,521.13',
      change: '+1.2%',
      trend: 'up'
    },
    {
      name: 'S&P 500',
      value: '4,783.45',
      change: '-0.3%',
      trend: 'down'
    },
    {
      name: 'Hang Seng',
      value: '16,624.84',
      change: '+2.1%',
      trend: 'up'
    }
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center space-x-3 mb-6">
        <LineChart className="w-6 h-6 text-blue-600" />
        <h1 className="text-2xl font-bold text-gray-900">Market Information</h1>
      </div>

      <div className="grid grid-cols-3 gap-6">
        {marketData.map((item, index) => (
          <div key={index} className="bg-white rounded-xl shadow-sm border border-blue-100 p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">{item.name}</h3>
            <div className="text-2xl font-bold mb-2">{item.value}</div>
            <div className={`flex items-center ${
              item.trend === 'up' ? 'text-green-600' : 'text-red-600'
            }`}>
              {item.trend === 'up' ? (
                <TrendingUp className="w-5 h-5 mr-2" />
              ) : (
                <TrendingDown className="w-5 h-5 mr-2" />
              )}
              {item.change}
            </div>
          </div>
        ))}
      </div>

      <div className="bg-white rounded-xl shadow-sm border border-blue-100 p-6">
        <h2 className="text-lg font-medium text-gray-900 mb-4">Market Overview</h2>
        <div className="h-96 bg-gray-50 rounded-lg flex items-center justify-center text-gray-500">
          Chart placeholder
        </div>
      </div>
    </div>
  );
}

// ====== Fichier : ./pages/Client.jsx ======

import React from 'react';
import { User, Mail, Phone, MapPin } from 'lucide-react';

export function Client() {
  const clientInfo = {
    name: 'John Doe',
    email: 'john.doe@example.com',
    phone: '+33 6 12 34 56 78',
    address: '123 Avenue des Champs-Élysées, Paris',
    accountNumber: 'FR76 3000 1007 1234 5678 9012 345',
    portfolioValue: '€1,245,678.90',
    lastLogin: '2025-01-22 14:30'
  };

  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-bold text-gray-900 mb-6">Client Information</h1>

      <div className="bg-white rounded-xl shadow-sm border border-blue-100 p-6">
        <div className="grid grid-cols-2 gap-6">
          <div className="space-y-4">
            <div className="flex items-center space-x-3">
              <User className="w-5 h-5 text-blue-600" />
              <div>
                <div className="text-sm text-gray-500">Name</div>
                <div className="font-medium">{clientInfo.name}</div>
              </div>
            </div>
            <div className="flex items-center space-x-3">
              <Mail className="w-5 h-5 text-blue-600" />
              <div>
                <div className="text-sm text-gray-500">Email</div>
                <div className="font-medium">{clientInfo.email}</div>
              </div>
            </div>
            <div className="flex items-center space-x-3">
              <Phone className="w-5 h-5 text-blue-600" />
              <div>
                <div className="text-sm text-gray-500">Phone</div>
                <div className="font-medium">{clientInfo.phone}</div>
              </div>
            </div>
            <div className="flex items-center space-x-3">
              <MapPin className="w-5 h-5 text-blue-600" />
              <div>
                <div className="text-sm text-gray-500">Address</div>
                <div className="font-medium">{clientInfo.address}</div>
              </div>
            </div>
          </div>

          <div className="space-y-4">
            <div>
              <div className="text-sm text-gray-500">Account Number</div>
              <div className="font-medium font-mono">{clientInfo.accountNumber}</div>
            </div>
            <div>
              <div className="text-sm text-gray-500">Portfolio Value</div>
              <div className="font-medium">{clientInfo.portfolioValue}</div>
            </div>
            <div>
              <div className="text-sm text-gray-500">Last Login</div>
              <div className="font-medium">{clientInfo.lastLogin}</div>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-white rounded-xl shadow-sm border border-blue-100 p-6">
        <h2 className="text-lg font-medium text-gray-900 mb-4">Account Activity</h2>
        <div className="h-64 bg-gray-50 rounded-lg flex items-center justify-center text-gray-500">
          Activity timeline placeholder
        </div>
      </div>
    </div>
  );
}

// ====== Fichier : ./components/PortfolioTable.jsx ======

import React, { useState } from 'react';
import { Eye, ArrowRight, X, AlertCircle } from 'lucide-react';
import { api } from '../lib/api';

export function PortfolioTable({ data, currentDate }) {
  const [showRebalancing, setShowRebalancing] = useState(false);
  const [rebalancingData, setRebalancingData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleRebalanceInfo = async () => {
    try {
      setLoading(true);
      const response = await api.getRebalancingInfo(currentDate);
      setRebalancingData(response.rebalancing);
      setShowRebalancing(true);
      setError(null);
    } catch (err) {
      setError('Failed to fetch rebalancing information');
      console.error('Error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleRebalance = async () => {
    try {
      setLoading(true);
      await api.rebalancePortfolio(currentDate, data);
      // Refresh data after rebalancing
      window.location.reload();
    } catch (err) {
      setError('Failed to rebalance portfolio');
      console.error('Error:', err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border border-blue-100 overflow-hidden">
      <div className="p-6">
        <h2 className="text-xl font-semibold text-gray-900 mb-6">Portfolio Information</h2>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="bg-gray-50">
                <th className="px-6 py-3 text-left text-sm font-semibold text-gray-600">Product</th>
                <th className="px-6 py-3 text-left text-sm font-semibold text-gray-600">Quantity</th>
                <th className="px-6 py-3 text-left text-sm font-semibold text-gray-600">Price (€)</th>
                <th className="px-6 py-3 text-left text-sm font-semibold text-gray-600">Foreign Price</th>
                <th className="px-6 py-3 text-left text-sm font-semibold text-gray-600">Total</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {data.map((item, index) => (
                <tr key={index} className="hover:bg-gray-50 transition-colors">
                  <td className="px-6 py-4 text-sm">{item.name}</td>
                  <td className="px-6 py-4 text-sm font-mono">{item.quantity.toFixed(2)}</td>
                  <td className="px-6 py-4 text-sm font-mono">{item.price.toFixed(2)}</td>
                  <td className="px-6 py-4 text-sm font-mono">{item.foreignPrice.toFixed(2)}</td>
                  <td className="px-6 py-4 text-sm font-mono">{(item.quantity * item.price).toFixed(2)}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {error && (
          <div className="mt-4 p-4 bg-red-50 text-red-600 rounded-lg flex items-center">
            <AlertCircle className="w-5 h-5 mr-2" />
            {error}
          </div>
        )}

        <div className="mt-6 flex gap-4">
          <button
            onClick={handleRebalanceInfo}
            disabled={loading}
            className="btn btn-primary flex items-center"
          >
            <Eye className="w-4 h-4 mr-2" />
            Rebalancing Info
          </button>
          <button
            onClick={handleRebalance}
            disabled={loading}
            className="btn btn-secondary flex items-center"
          >
            Rebalance
            <ArrowRight className="w-4 h-4 ml-2" />
          </button>
        </div>
      </div>

      {showRebalancing && rebalancingData && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4">
          <div className="bg-white rounded-xl shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h3 className="text-xl font-semibold text-gray-900">
                  Rebalancing Information
                </h3>
                <button
                  onClick={() => setShowRebalancing(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
              <table className="w-full">
                <thead>
                  <tr className="bg-gray-50">
                    <th className="px-6 py-3 text-left text-sm font-semibold text-gray-600">Product</th>
                    <th className="px-6 py-3 text-left text-sm font-semibold text-gray-600">Previous Qty</th>
                    <th className="px-6 py-3 text-left text-sm font-semibold text-gray-600">New Qty</th>
                    <th className="px-6 py-3 text-left text-sm font-semibold text-gray-600">Change</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {rebalancingData.map((item, index) => (
                    <tr key={index} className="hover:bg-gray-50">
                      <td className="px-6 py-4 text-sm">{item.name}</td>
                      <td className="px-6 py-4 text-sm font-mono">{item.previousQuantity.toFixed(2)}</td>
                      <td className="px-6 py-4 text-sm font-mono">{item.newQuantity.toFixed(2)}</td>
                      <td className="px-6 py-4 text-sm font-mono">
                        <span className={item.newQuantity - item.previousQuantity >= 0 ? 'text-green-600' : 'text-red-600'}>
                          {(item.newQuantity - item.previousQuantity).toFixed(2)}
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// ====== Fichier : ./components/MarketInfo.jsx ======

import React from 'react';
import { LineChart } from 'lucide-react';

const IndexCard = ({ name, dailyPerf, sixMonthPerf, yearPerf }) => (
  <div className="bg-blue-100 p-4 rounded-lg">
    <h3 className="font-medium mb-2">Index name</h3>
    <p>{name}</p>
    <div className="space-y-1 mt-2">
      <div>
        <div className="text-sm text-gray-600">Daily performance (in %)</div>
        <div className={`font-medium ${dailyPerf >= 0 ? 'text-green-600' : 'text-red-600'}`}>
          {dailyPerf}
        </div>
      </div>
      <div>
        <div className="text-sm text-gray-600">6-months performance (in %)</div>
        <div className={`font-medium ${sixMonthPerf >= 0 ? 'text-green-600' : 'text-red-600'}`}>
          {sixMonthPerf}
        </div>
      </div>
      <div>
        <div className="text-sm text-gray-600">Year performance (in %)</div>
        <div className={`font-medium ${yearPerf >= 0 ? 'text-green-600' : 'text-red-600'}`}>
          {yearPerf}
        </div>
      </div>
    </div>
  </div>
);

export function MarketInfo() {
  const indices = [
    {
      name: 'Eurostoxx 50',
      dailyPerf: 0.67,
      sixMonthPerf: -18.75,
      yearPerf: -31.98
    },
    {
      name: 'S&P 500',
      dailyPerf: -0.47,
      sixMonthPerf: -23.66,
      yearPerf: -29.23
    },
    {
      name: 'Hang Seng',
      dailyPerf: 3.46,
      sixMonthPerf: -26.50,
      yearPerf: -28.47
    }
  ];

  return (
    <div className="bg-white rounded-lg shadow p-6 mb-6">
      <div className="flex items-center gap-2 mb-4">
        <LineChart className="w-5 h-5 text-blue-600" />
        <h2 className="text-xl font-semibold">Market Information</h2>
      </div>
      <div className="grid grid-cols-3 gap-4">
        {indices.map((index, i) => (
          <IndexCard key={i} {...index} />
        ))}
      </div>
    </div>
  );
}

// ====== Fichier : ./components/Stats.jsx ======

import React, { useState, useEffect } from 'react';
import { TrendingUp, TrendingDown, DollarSign } from 'lucide-react';
import { api } from '../lib/api';

export function Stats({ date }) {
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    async function fetchStats() {
      try {
        setLoading(true);
        const data = await api.getStats(date);
        setStats(data);
        setError(null);
      } catch (err) {
        setError('Failed to fetch statistics');
        console.error('Error:', err);
      } finally {
        setLoading(false);
      }
    }

    fetchStats();
  }, [date]);

  if (loading) {
    return (
      <div className="grid grid-cols-3 gap-6">
        {[1, 2, 3].map((i) => (
          <div key={i} className="bg-white rounded-xl shadow-sm border border-blue-100 p-6 animate-pulse">
            <div className="h-4 bg-gray-200 rounded w-1/3 mb-4"></div>
            <div className="h-8 bg-gray-200 rounded w-1/2"></div>
          </div>
        ))}
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 text-red-600 p-4 rounded-lg">
        {error}
      </div>
    );
  }

  if (!stats) return null;

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-3 gap-6">
        <div className="bg-white rounded-xl shadow-sm border border-blue-100 p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-gray-500 font-medium">P&L</h3>
            {stats.pnl >= 0 ? (
              <TrendingUp className="w-5 h-5 text-green-500" />
            ) : (
              <TrendingDown className="w-5 h-5 text-red-500" />
            )}
          </div>
          <div className={`text-2xl font-bold ${
            stats.pnl >= 0 ? 'text-green-600' : 'text-red-600'
          }`}>
            {stats.pnl.toFixed(2)}%
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-blue-100 p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-gray-500 font-medium">Portfolio Value</h3>
            <DollarSign className="w-5 h-5 text-blue-500" />
          </div>
          <div className="text-2xl font-bold">
            {stats.portfolioValue.toLocaleString('fr-FR', {
              style: 'currency',
              currency: 'EUR',
              minimumFractionDigits: 2,
              maximumFractionDigits: 2
            })}
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-blue-100 p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-gray-500 font-medium">Liquidative Value</h3>
            <DollarSign className="w-5 h-5 text-blue-500" />
          </div>
          <div className="text-2xl font-bold">
            {stats.liquidativeValue.toLocaleString('fr-FR', {
              style: 'currency',
              currency: 'EUR',
              minimumFractionDigits: 2,
              maximumFractionDigits: 2
            })}
          </div>
        </div>
      </div>
    </div>
  );
}

// ====== Fichier : ./components/Header.jsx ======

import React from 'react';
import { LineChart } from 'lucide-react';

export function Header() {
  return (
    <header className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white py-4 px-8 shadow-lg">
      <div className="max-w-7xl mx-auto flex justify-between items-center">
        <div className="flex items-center space-x-3">
          <LineChart className="w-8 h-8" />
          <div>
            <h1 className="text-2xl font-bold">Portfolio Management</h1>
            <p className="text-blue-100 text-sm">Real-time market analysis</p>
          </div>
        </div>
        <div className="flex items-center space-x-6">
          <div className="text-sm">
            <span className="text-blue-100">Market Status:</span>
            <span className="ml-2 bg-green-500 text-white px-2 py-1 rounded-full text-xs">
              Open
            </span>
          </div>
          <div className="font-medium">Equipe 6</div>
        </div>
      </div>
    </header>
  );
}

// ====== Fichier : ./components/Sidebar.jsx ======

import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { Building2, LineChart, Users, Info, Settings } from 'lucide-react';

export function Sidebar() {
  const location = useLocation();

  const menuItems = [
    {
      icon: Building2,
      title: 'Portfolio',
      description: 'Main page to access your portfolio',
      path: '/'
    },
    {
      icon: LineChart,
      title: 'Market Information',
      description: 'Index in live',
      path: '/market'
    },
    {
      icon: Users,
      title: 'Client',
      description: "All client's information",
      path: '/client'
    },
    {
      icon: Info,
      title: 'Info',
      description: 'Information about this product',
      path: '/info'
    }
  ];

  return (
    <aside className="w-72 bg-white border-r border-gray-200">
      <div className="p-6">
        <div className="mb-8">
          <h2 className="text-xs font-semibold text-gray-400 uppercase tracking-wider">
            Navigation
          </h2>
        </div>
        <nav className="space-y-2">
          {menuItems.map((item, index) => {
            const Icon = item.icon;
            const isActive = location.pathname === item.path;
            return (
              <Link
                key={index}
                to={item.path}
                className={`w-full flex items-start space-x-4 p-3 rounded-lg transition-colors ${
                  isActive
                    ? 'bg-blue-50 text-blue-600'
                    : 'text-gray-600 hover:bg-gray-50'
                }`}
              >
                <Icon className="w-5 h-5 mt-0.5" />
                <div className="flex-1 text-left">
                  <div className="font-medium">{item.title}</div>
                  <div className="text-sm text-gray-500">{item.description}</div>
                </div>
              </Link>
            );
          })}
        </nav>

        <div className="mt-8 pt-8 border-t">
          <button className="w-full flex items-center space-x-3 px-3 py-2 text-gray-600 hover:bg-gray-50 rounded-lg transition-colors">
            <Settings className="w-5 h-5" />
            <span>Settings</span>
          </button>
        </div>
      </div>
    </aside>
  );
}

// ====== Fichier : ./components/DateSelector.jsx ======

import React, { useState } from 'react';
import { ChevronRight, Calendar } from 'lucide-react';

export function DateSelector({ date, onDateChange }) {
  const [inputDate, setInputDate] = useState(date);

  const handleNextDay = () => {
    const nextDay = new Date(date);
    nextDay.setDate(nextDay.getDate() + 1);
    const formattedDate = nextDay.toISOString().split('T')[0];
    onDateChange(formattedDate);
  };

  const handleDateSubmit = () => {
    if (inputDate && inputDate.match(/^\d{4}-\d{2}-\d{2}$/)) {
      onDateChange(inputDate);
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border border-blue-100 p-6">
      <div className="flex justify-between items-center">
        <div className="flex items-center space-x-3">
          <Calendar className="w-5 h-5 text-blue-600" />
          <span className="text-lg font-medium text-gray-900">
            Current date: {date}
          </span>
        </div>
        <div className="flex items-center space-x-4">
          <button
            onClick={handleNextDay}
            className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            Next Day
            <ChevronRight className="w-4 h-4 ml-1" />
          </button>
          <div className="flex items-center space-x-2">
            <input
              type="text"
              value={inputDate}
              onChange={(e) => setInputDate(e.target.value)}
              placeholder="YYYY-MM-DD"
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
            <button
              onClick={handleDateSubmit}
              className="px-4 py-2 bg-gray-800 text-white rounded-lg hover:bg-gray-900 transition-colors"
            >
              Go
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

// ====== Fichier : ./components/StockChart.jsx ======

import React from 'react';
import { Glasses as MagnifyingGlass, Home, Settings } from 'lucide-react';

export function StockChart() {
  return (
    <div className="bg-white rounded-lg shadow p-6">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-semibold">EUROSTOXX 50</h2>
        <div className="flex items-center gap-2">
          <span className="text-sm text-gray-500">Stock Price Movement</span>
          <div className="flex gap-1">
            <button className="p-1 hover:bg-gray-100 rounded">
              <MagnifyingGlass className="w-4 h-4 text-gray-600" />
            </button>
            <button className="p-1 hover:bg-gray-100 rounded">
              <Home className="w-4 h-4 text-gray-600" />
            </button>
            <button className="p-1 hover:bg-gray-100 rounded">
              <Settings className="w-4 h-4 text-gray-600" />
            </button>
          </div>
        </div>
      </div>
      <div className="h-[400px] relative">
        {/* Ici, vous pouvez intégrer une bibliothèque de graphiques comme Chart.js ou Recharts */}
        <img 
          src="https://images.unsplash.com/photo-1642790106117-e829e14a795f?auto=format&fit=crop&w=800&h=400"
          alt="Stock chart"
          className="w-full h-full object-cover rounded"
        />
      </div>
    </div>
  );
}

// ====== Fichier : ./mock-server/browser.js ======

// src/mocks/browser.js
import { setupWorker } from 'msw'
import { handlers } from './handlers'

export const worker = setupWorker(...handlers)



// ====== Fichier : ./mock-server/setup-mock.js ======

import fs from 'fs';

const mockData = {
  "portfolioData": {
    "status": "success",
    "data": {
      "portfolio": {
        "cash": 150000,
        "EUROSTOXX50": {
          "quantity": 1000,
          "price": 3500.25,
          "foreignPrice": 3500.25
        },
        "SP500": {
          "quantity": 500,
          "price": 4200.75,
          "foreignPrice": 4800.50
        },
        "FTSE100": {
          "quantity": 750,
          "price": 7100.30,
          "foreignPrice": 6300.20
        },
        "ASX200": {
          "quantity": 300,
          "price": 6800.15,
          "foreignPrice": 7200.45
        },
        "TOPIX": {
          "quantity": 450,
          "price": 1900.80,
          "foreignPrice": 210000.0
        }
      },
      "output": {
        "pnl": 2.35,
        "EUROSTOXX50": {
          "before": 1000,
          "after": 1050
        },
        "SP500": {
          "before": 500,
          "after": 480
        },
        "FTSE100": {
          "before": 750,
          "after": 770
        },
        "ASX200": {
          "before": 300,
          "after": 320
        },
        "TOPIX": {
          "before": 450,
          "after": 430
        }
      }
    }
  },
  "marketData": {
    "status": "success",
    "data": {
      "date": "2025-01-22T00:00:00.000Z",
      "dict_index_price": {
        "EUROSTOXX50": 3500.25,
        "SP500": 4200.75,
        "FTSE100": 7100.30,
        "ASX200": 6800.15,
        "TOPIX": 1900.80
      },
      "dict_exchange_rate": {
        "EUR": 1.0,
        "USD": 1.14,
        "GBP": 0.89,
        "AUD": 1.06,
        "JPY": 110.45
      }
    }
  }
};

fs.writeFileSync('db.json', JSON.stringify(mockData, null, 2));

const routes = {
  "/api/hedge": "/portfolioData",
  "/api/next-day": "/marketData"
};

fs.writeFileSync('routes.json', JSON.stringify(routes, null, 2));

console.log("Fichiers de configuration créés. Lancez le serveur avec:");
console.log("json-server --watch db.json --routes routes.json --port 5000");

// ====== Fichier : ./mock-server/handlers.js ======

// src/mocks/handlers.js
import { rest } from 'msw'

export const handlers = [
  // Gérer les appels POST à /api/hedge
  rest.post('http://localhost:5000/api/hedge', (req, res, ctx) => {
    const { isFirstTime } = req.body;  // Tu peux personnaliser la logique en fonction du corps de la requête

    return res(
      ctx.status(200),
      ctx.json({
        status: "success",
        data: {
          portfolio: {
            cash: 150000,
            EUROSTOXX50: { quantity: 1000, price: 3500.25, foreignPrice: 3500.25 },
            SP500: { quantity: 500, price: 4200.75, foreignPrice: 4800.50 },
            FTSE100: { quantity: 750, price: 7100.30, foreignPrice: 6300.20 },
            ASX200: { quantity: 300, price: 6800.15, foreignPrice: 7200.45 },
            TOPIX: { quantity: 450, price: 1900.80, foreignPrice: 210000.0 }
          },
          output: {
            pnl: 2.35,
            EUROSTOXX50: { before: 1000, after: 1050 },
            SP500: { before: 500, after: 480 },
            FTSE100: { before: 750, after: 770 },
            ASX200: { before: 300, after: 320 },
            TOPIX: { before: 450, after: 430 }
          }
        }
      })
    )
  }),

  // Gérer les appels GET à /api/next-day
  rest.get('http://localhost:5000/api/next-day', (req, res, ctx) => {
    return res(
      ctx.status(200),
      ctx.json({
        status: "success",
        data: {
          date: "2025-01-22T00:00:00.000Z",
          dict_index_price: {
            EUROSTOXX50: 3500.25,
            SP500: 4200.75,
            FTSE100: 7100.30,
            ASX200: 6800.15,
            TOPIX: 1900.80
          },
          dict_exchange_rate: {
            EUR: 1.0,
            USD: 1.14,
            GBP: 0.89,
            AUD: 1.06,
            JPY: 110.45
          }
        }
      })
    )
  })
]



// ====== Fichier : ./lib/api.js ======

// Modifiez le fichier ./lib/api.js pour ajouter le mode mock

const API_URL = 'http://localhost:5000/api';
const USE_MOCK = true; // Activer le mode mock

// Enum des indices correspondant au backend
const INDICES = {
  ASX200: 'ASX200',
  EUROSTOXX50: 'EUROSTOXX50',
  FTSE100: 'FTSE100',
  SP500: 'SP500',
  TOPIX: 'TOPIX'
};

// Fonction utilitaire pour formater les noms des indices
const formatIndexName = (name) => {
  switch (name) {
    case INDICES.ASX200: return 'ASX 200';
    case INDICES.EUROSTOXX50: return 'EURO STOXX 50';
    case INDICES.FTSE100: return 'FTSE 100';
    case INDICES.SP500: return 'S&P 500';
    case INDICES.TOPIX: return 'TOPIX';
    default: return name;
  }
};

// Données mock pour les tests
const MOCK_DATA = {
  portfolio: {
    cash: 150000,
    EUROSTOXX50: {
      quantity: 1000,
      price: 3500.25,
      foreignPrice: 3500.25
    },
    SP500: {
      quantity: 500,
      price: 4200.75,
      foreignPrice: 4800.50
    },
    FTSE100: {
      quantity: 750,
      price: 7100.30,
      foreignPrice: 6300.20
    },
    ASX200: {
      quantity: 300,
      price: 6800.15,
      foreignPrice: 7200.45
    },
    TOPIX: {
      quantity: 450,
      price: 1900.80,
      foreignPrice: 210000.0
    }
  },
  output: {
    pnl: 2.35,
    EUROSTOXX50: {
      before: 1000,
      after: 1050
    },
    SP500: {
      before: 500,
      after: 480
    },
    FTSE100: {
      before: 750,
      after: 770
    },
    ASX200: {
      before: 300,
      after: 320
    },
    TOPIX: {
      before: 450,
      after: 430
    }
  }
};

export const api = {
  async getPortfolio(date) {
    if (USE_MOCK) {
      // Version mock
      return {
        portfolio: {
          data: Object.entries(MOCK_DATA.portfolio)
            .filter(([key]) => key !== 'cash')
            .map(([name, details]) => ({
              name: formatIndexName(name),
              quantity: details.quantity || 0,
              price: details.price || 0,
              foreignPrice: details.foreignPrice || 0,
              total: (details.quantity || 0) * (details.price || 0)
            }))
        }
      };
    }
    
    try {
      // Version originale
      const response = await fetch(`${API_URL}/hedge`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          date: date,
          isFirstTime: false,
          currDate: date,
          cash: 1000,
          compos: {}
        })
      });

      if (!response.ok) throw new Error('Failed to fetch portfolio data');
      const data = await response.json();

      // Transform the portfolio data to match the frontend structure
      const portfolioData = {
        portfolio: {
          data: Object.entries(data.data.portfolio)
            .filter(([key]) => key !== 'cash')
            .map(([name, details]) => ({
              name: formatIndexName(name),
              quantity: details.quantity || 0,
              price: details.price || 0,
              foreignPrice: details.foreignPrice || 0,
              total: (details.quantity || 0) * (details.price || 0)
            }))
        }
      };

      return portfolioData;
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  },

  async getRebalancingInfo(date) {
    if (USE_MOCK) {
      // Version mock
      return {
        rebalancing: Object.entries(MOCK_DATA.output)
          .filter(([key]) => key !== 'pnl')
          .map(([name, details]) => ({
            name: formatIndexName(name),
            previousQuantity: details.before || 0,
            newQuantity: details.after || 0
          }))
      };
    }
    
    try {
      // Version originale
      const response = await fetch(`${API_URL}/hedge`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          date: date,
          isFirstTime: false,
          currDate: date,
          cash: 1000000,
          compos: {}
        })
      });

      if (!response.ok) throw new Error('Failed to fetch rebalancing data');
      const data = await response.json();

      // Transform the output data to match the frontend structure
      const rebalancingData = {
        rebalancing: Object.entries(data.data.output)
          .filter(([key]) => key !== 'pnl')
          .map(([name, details]) => ({
            name: formatIndexName(name),
            previousQuantity: details.before || 0,
            newQuantity: details.after || 0
          }))
      };

      return rebalancingData;
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  },

  async rebalancePortfolio(date, currentPortfolio) {
    if (USE_MOCK) {
      // Version mock - simuler une réussite
      return { status: "success", message: "Portfolio rebalanced successfully" };
    }
    
    try {
      // Version originale
      const backendCompos = currentPortfolio.reduce((acc, item) => {
        const backendName = Object.entries(INDICES).find(
          ([_, value]) => formatIndexName(value) === item.name
        )?.[1] || item.name;
        
        acc[backendName] = item.quantity;
        return acc;
      }, {});

      const response = await fetch(`${API_URL}/hedge`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          date: date,
          isFirstTime: false,
          currDate: date,
          cash: 1000,
          compos: backendCompos
        })
      });

      if (!response.ok) throw new Error('Failed to rebalance portfolio');
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  },

  async getStats(date) {
    if (USE_MOCK) {
      // Version mock
      const portfolioValue = Object.entries(MOCK_DATA.portfolio)
        .filter(([key]) => key !== 'cash')
        .reduce((sum, [_, details]) => sum + (details.quantity || 0) * (details.price || 0), 0);

      return {
        pnl: MOCK_DATA.output.pnl || 0,
        portfolioValue: portfolioValue,
        liquidativeValue: portfolioValue + MOCK_DATA.portfolio.cash
      };
    }
    
    try {
      // Version originale
      const response = await fetch(`${API_URL}/hedge`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          date: date,
          isFirstTime: false,
          currDate: date,
          cash: 1000,
          compos: {}
        })
      });

      if (!response.ok) throw new Error('Failed to fetch stats data');
      const data = await response.json();

      // Calculate portfolio value from the portfolio data
      const portfolioValue = Object.entries(data.data.portfolio)
        .filter(([key]) => key !== 'cash')
        .reduce((sum, [_, details]) => sum + (details.quantity || 0) * (details.price || 0), 0);

      // Get cash value
      const cash = data.data.portfolio.cash || 0;

      // Get PnL from output
      const pnl = data.data.output.pnl || 0;

      return {
        pnl: pnl,
        portfolioValue: portfolioValue,
        liquidativeValue: portfolioValue + cash
      };
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  }
};
