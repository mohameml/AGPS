// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pricing.proto

#include "pricing.pb.h"
#include "pricing.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace grpc_pricer {

static const char* GrpcPricer_method_names[] = {
  "/grpc_pricer.GrpcPricer/PriceAndDeltas",
  "/grpc_pricer.GrpcPricer/HelloWorld",
};

std::unique_ptr< GrpcPricer::Stub> GrpcPricer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GrpcPricer::Stub> stub(new GrpcPricer::Stub(channel, options));
  return stub;
}

GrpcPricer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PriceAndDeltas_(GrpcPricer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HelloWorld_(GrpcPricer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GrpcPricer::Stub::PriceAndDeltas(::grpc::ClientContext* context, const ::grpc_pricer::PricingInput& request, ::grpc_pricer::PricingOutput* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_pricer::PricingInput, ::grpc_pricer::PricingOutput, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PriceAndDeltas_, context, request, response);
}

void GrpcPricer::Stub::async::PriceAndDeltas(::grpc::ClientContext* context, const ::grpc_pricer::PricingInput* request, ::grpc_pricer::PricingOutput* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_pricer::PricingInput, ::grpc_pricer::PricingOutput, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PriceAndDeltas_, context, request, response, std::move(f));
}

void GrpcPricer::Stub::async::PriceAndDeltas(::grpc::ClientContext* context, const ::grpc_pricer::PricingInput* request, ::grpc_pricer::PricingOutput* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PriceAndDeltas_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_pricer::PricingOutput>* GrpcPricer::Stub::PrepareAsyncPriceAndDeltasRaw(::grpc::ClientContext* context, const ::grpc_pricer::PricingInput& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_pricer::PricingOutput, ::grpc_pricer::PricingInput, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PriceAndDeltas_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_pricer::PricingOutput>* GrpcPricer::Stub::AsyncPriceAndDeltasRaw(::grpc::ClientContext* context, const ::grpc_pricer::PricingInput& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPriceAndDeltasRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GrpcPricer::Stub::HelloWorld(::grpc::ClientContext* context, const ::grpc_pricer::Empty& request, ::grpc_pricer::ReqInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_pricer::Empty, ::grpc_pricer::ReqInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HelloWorld_, context, request, response);
}

void GrpcPricer::Stub::async::HelloWorld(::grpc::ClientContext* context, const ::grpc_pricer::Empty* request, ::grpc_pricer::ReqInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_pricer::Empty, ::grpc_pricer::ReqInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HelloWorld_, context, request, response, std::move(f));
}

void GrpcPricer::Stub::async::HelloWorld(::grpc::ClientContext* context, const ::grpc_pricer::Empty* request, ::grpc_pricer::ReqInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HelloWorld_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_pricer::ReqInfo>* GrpcPricer::Stub::PrepareAsyncHelloWorldRaw(::grpc::ClientContext* context, const ::grpc_pricer::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_pricer::ReqInfo, ::grpc_pricer::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HelloWorld_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_pricer::ReqInfo>* GrpcPricer::Stub::AsyncHelloWorldRaw(::grpc::ClientContext* context, const ::grpc_pricer::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHelloWorldRaw(context, request, cq);
  result->StartCall();
  return result;
}

GrpcPricer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcPricer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcPricer::Service, ::grpc_pricer::PricingInput, ::grpc_pricer::PricingOutput, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GrpcPricer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_pricer::PricingInput* req,
             ::grpc_pricer::PricingOutput* resp) {
               return service->PriceAndDeltas(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcPricer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcPricer::Service, ::grpc_pricer::Empty, ::grpc_pricer::ReqInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GrpcPricer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_pricer::Empty* req,
             ::grpc_pricer::ReqInfo* resp) {
               return service->HelloWorld(ctx, req, resp);
             }, this)));
}

GrpcPricer::Service::~Service() {
}

::grpc::Status GrpcPricer::Service::PriceAndDeltas(::grpc::ServerContext* context, const ::grpc_pricer::PricingInput* request, ::grpc_pricer::PricingOutput* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcPricer::Service::HelloWorld(::grpc::ServerContext* context, const ::grpc_pricer::Empty* request, ::grpc_pricer::ReqInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpc_pricer

