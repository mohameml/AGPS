===== json_reader.cpp =====
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include "json_reader.hpp"


void to_json(nlohmann::json &j, PnlVect *vect) {
    std::vector<double> stl_v(vect->array, vect->array + vect->size);
    j = stl_v;
}

void to_json(nlohmann::ordered_json &j, PnlVect *vect) {
    std::vector<double> stl_v(vect->array, vect->array + vect->size);
    j = stl_v;
}

void from_json(const nlohmann::json &j, PnlVect *&vect) {
    std::vector<double> stl_v = j.get<std::vector<double>>();
    vect = pnl_vect_create_from_ptr(stl_v.size(), stl_v.data());
}

void from_json(const nlohmann::json &j, PnlMat *&mat) {
    std::vector<std::vector<double>> stl_m = j.get<std::vector<std::vector<double>>>();
    int nLines = stl_m.size();
    if (nLines == 0) {
        mat = pnl_mat_create(0, 0);
        return;
    }
    int nColumns = stl_m[0].size();
    for (auto it : stl_m) {
        if (nColumns != it.size()) {
            std::cerr << "Matrix is not regular" << std::endl;
            mat = NULL;
            return;
        }
    }
    mat = pnl_mat_create(nLines, nColumns);
    int m = 0;
    for (auto row : stl_m) {
        pnl_mat_set_row_from_ptr(mat, row.data(), m);
        m++;
    }
}


===== RiskyAsset.hpp =====
#ifndef _Risky_Asset_HPP
#define _Risky_Asset_HPP

#include "pnl/pnl_vector.h"
#include "json_reader.hpp"
#include "InterestRateModel.hpp"
#include "RiskyDynamics.hpp"

class  RiskyAsset : public RiskyDynamics {

public : 

    InterestRateModel domesticInterestRate;
    RiskyAsset();
    RiskyAsset(InterestRateModel domesticInterestRate , double realVolatility , PnlVect* volatilityVector , int index);
    ~RiskyAsset();

};


#endif 

===== RiskyDynamics.cpp =====
#include "RiskyDynamics.hpp"
#include "pnl/pnl_vector.h"

RiskyDynamics::RiskyDynamics()
{
}

RiskyDynamics::RiskyDynamics(double dirft, double realVolatility, PnlVect* volatilityVector_ , int index):drift(drift),realVolatility(realVolatility),index(index)
{
    // pnl_vect_mult_scalar(this->volatilityVector, realVolatility);
    int len = volatilityVector_->size;
    this->volatilityVector = pnl_vect_create_from_double( len , 0.0);
    for (size_t i = 0; i < len; i++)
    {
        LET(this->volatilityVector , i) = GET(volatilityVector_ , i);
    }
    


    // pnl_vect_clone(this->volatilityVector , volatilityVector_);
}


RiskyDynamics::~RiskyDynamics()
{
    if(volatilityVector)
        pnl_vect_free(&volatilityVector);
}



void RiskyDynamics::sampleNextDate(PnlMat *path, double step, const PnlVect *G, int index_time)
{
    
    double value =  exp((drift- realVolatility * realVolatility / 2.0) * step +  sqrt(step) * pnl_vect_scalar_prod(volatilityVector, G));

    double s_t_d = MGET(path, index_time - 1, index);
    MLET(path , index_time , index) = s_t_d*value ;
}


void RiskyDynamics::sampleNextDate(PnlMat *path, double step, const PnlVect *G, int index_time , bool isMonitoringDate)
{
    
    double value =  exp((drift- realVolatility * realVolatility / 2.0) * step +  sqrt(step) * pnl_vect_scalar_prod(volatilityVector, G));

    if(isMonitoringDate) {

        double s_t_d = MGET(path, index_time - 1, index);
        MLET(path , index_time , index) = s_t_d*value ;
    
    } else {

        double s_t_d = MGET(path, index_time, index);
        MLET(path , index_time , index) = s_t_d*value ;
        
    }

}


===== test_json_reader.cpp =====
#include <iostream>
#include <fstream>
#include "json_reader.hpp"


int main(int argc, char **argv) {
    if (argc != 2) {
        std::cerr << "Wrong number of arguments. Exactly one argument is required" << std::endl;
        std::exit(0);
    }
    std::ifstream ifs(argv[1]);
    nlohmann::json jsonParams = nlohmann::json::parse(ifs);

    PnlMat *correlation;
    jsonParams.at("Correlations").get_to(correlation);
    pnl_mat_print(correlation);

    std::string domesticCurrencyId;
    jsonParams.at("DomesticCurrencyId").get_to(domesticCurrencyId);
    int assetNb = jsonParams.at("Assets").size();
    std::cout << "Number of assets " << assetNb << std::endl;

    std::cout << "-- currencies" << std::endl;
    auto jsonCurrencies = jsonParams.at("Currencies");
    for (auto jsonCurrency : jsonCurrencies) {
        std::string currencyId(jsonCurrency.at("id").get<std::string>());
        double rf = jsonCurrency.at("InterestRate").get<double>();
        double realVolatility = jsonCurrency.at("Volatility").get<double>();
        std::cout << "interest rate " << rf << std::endl;
        std::cout << "real volatility " << realVolatility << std::endl;
    }

    std::cout << "-- assets" << std::endl;
    auto jsonAssets = jsonParams.at("Assets");
    for (auto jsonAsset : jsonAssets) {
        std::string currencyId(jsonAsset.at("CurrencyId").get<std::string>());
        double realVolatility = jsonAsset.at("Volatility").get<double>();
        std::cout << "currency " << currencyId << std::endl;
        std::cout << "real volatility " << realVolatility << std::endl;
    }

    int numberOfDaysPerYear = jsonParams.at("NumberOfDaysInOneYear").get<int>();
    double maturity = jsonParams.at("Option").at("MaturityInDays").get<int>() / double (numberOfDaysPerYear);
    std::string label = jsonParams.at("Option").at("Type").get<std::string>();

    pnl_mat_free(&correlation);
    std::exit(0);
}

===== MonteCarlo.hpp =====
#ifndef __MONTE_CARLO_HPP__
#define __MONTE_CARLO_HPP__

#include "Option.hpp"
#include "GlobalModel.hpp"
#include "pnl/pnl_random.h"
#include "Position.hpp"

class MonteCarlo {


public:

    Option *option;           /// pointeur sur l'option
    GlobalModel *model; /// pointeur vers le modèle
    int sample_number;        /// nombre de tirage de MC
    double fd_step;           /// pas de méthode de différance fini
    PnlRng *rng;    
    int model_size ; /// size of the model 
    int nbDays ;
    int numberOfDaysPerYear;

public : 
    MonteCarlo();
    MonteCarlo(const nlohmann::json json);
    ~MonteCarlo();

    /**
     * calcul du prix à t  avec le delta de l'option à t   :
     *
     * @param[in] t : current time
     * @param[in] position : classe contient : price , price_std , deltas_vect , stddev_deltas_vect
     * @param[in] Past : matrice de taille (last_index + 1)*D ou (last_index)*D qui continet s_t0 , s_t1 , ..... , st_i , st
     */
    void priceAndDelta(int t, const PnlMat *Past, double& price , double& price_std , PnlVect* deltas_vect , PnlVect*  stddev_deltas_vect);


protected:
    /**
     * terime le  calucl de prix et std_prix :
     *
     * @param[in, out] price
     * @param[in, out] stdDev
     * @param nSamples : nombre de tirage de MC
     * @param t current date
     */
    void end_of_calcul_price(double &price, double &stdDev, double t) const;

    /**
     * terime le  calucl de delta :
     *
     * @param[in, out] price
     * @param[in, out] stdDev
     * @param nSamples : nombre de tirage de MC
     * @param t current date
     * @param St : vecteur de prix du sous-jacent
     */
    void end_of_calcul_delta(PnlVect *delta, PnlVect *delta_stdev, double t, PnlVect *St) const;

};


#endif 

===== MonteCarlo.cpp =====
#include "MonteCarlo.hpp"
#include <nlohmann/json.hpp>

MonteCarlo::MonteCarlo()
{
}

MonteCarlo::MonteCarlo(const nlohmann::json json)
{
    json.at("SampleNb").get_to(sample_number);
    json.at("RelativeFiniteDifferenceStep").get_to(fd_step);

    model = new GlobalModel(json);
    option = instance_option(json);

    model_size = model->assets.size() + model->currencies.size();

    nbDays = json.at("Option").at("MaturityInDays").get<int>();
    numberOfDaysPerYear = json.at("NumberOfDaysInOneYear").get<int>();

    rng = pnl_rng_create(PNL_RNG_MERSENNE);
    pnl_rng_sseed(rng, time(NULL));
}

MonteCarlo::~MonteCarlo()
{
    delete option ;
    delete model;
    pnl_rng_free(&rng);
}

void MonteCarlo::priceAndDelta(int t, const PnlMat *Past, double& price , double& price_std , PnlVect* deltas_vect , PnlVect*  stddev_deltas_vect)
{
    int D = model_size;
    int M = sample_number;
    int N = model->monitoringTimeGrid.len();
    double h = fd_step;
    

    PnlMat *path = pnl_mat_create(N, D);

    for (int i = 0; i < M; i++)
    {

        model->asset(Past, t , path, this->rng);
        
        double phi_j = this->option->payOff(path);
        price += phi_j;
        price_std += phi_j * phi_j;

        for (int d = 0; d < D; d++)
        {
            double diff_payoff = 0.0;
            model->shift_asset(d, t , 1.0 + h, path);
            diff_payoff += option->payOff(path);
            model->shift_asset(d, t , (1.0 - h) / (1.0 + h), path);
            diff_payoff -= option->payOff(path);
            model->shift_asset(d, t , 1.0 / (1.0 - h), path);
            LET(deltas_vect, d) += diff_payoff;
            LET(stddev_deltas_vect, d) += diff_payoff * diff_payoff;
        }
    }

    double t_ = (double) t / (double) numberOfDaysPerYear;
    end_of_calcul_price(price, price_std, t_);
    PnlVect St = pnl_vect_wrap_mat_row(Past, Past->m - 1);
    end_of_calcul_delta(deltas_vect, stddev_deltas_vect, t_, &St);

    pnl_mat_free(&path);
}

void MonteCarlo::end_of_calcul_price(double &price, double &price_stdev, double t) const
{
    double r = model->domesticInterestRate.rate;
    double T = option->maturity;
    double M = sample_number;
    price = std::exp(-r * (T - t)) * price / M;
    price_stdev = price_stdev * std::exp(-2.0 * r * (T - t)) / M - price * price;
    price_stdev = std::sqrt(std::abs(price_stdev / M));
}

void MonteCarlo::end_of_calcul_delta(PnlVect *delta, PnlVect *delta_stdev, double t, PnlVect *St) const
{
    double M = sample_number;
    double r = model->domesticInterestRate.rate;
    double T = option->maturity;
    double h = fd_step;

    // fin de calcul de delta :
    pnl_vect_mult_scalar(delta, std::exp(-r * (T - t)) / (2.0 * h * M));
    pnl_vect_div_vect_term(delta, St);

    // fin de calcul de delta_std_dev :
    pnl_vect_mult_scalar(delta_stdev, std::exp(-2.0 * r * (T - t)) / (4.0 * M * h * h));
    pnl_vect_div_vect_term(delta_stdev, St);
    pnl_vect_div_vect_term(delta_stdev, St);
    PnlVect *delta_copy = pnl_vect_copy(delta);
    pnl_vect_mult_vect_term(delta_copy, delta);
    pnl_vect_minus_vect(delta_stdev, delta_copy);
    pnl_vect_div_double(delta_stdev, M);
    // pnl_vect_map_inplace(delta_stdev, std::sqrt);
    for (size_t i = 0; i < delta_stdev->size; i++)
    {
        LET(delta_stdev , i) = std::sqrt(std::abs(GET(delta_stdev , i)));
    }
    

    pnl_vect_free(&delta_copy);
}

===== Option.cpp =====
#include "Option.hpp"
#include <iostream>

#include "CallCurrencyOption.hpp"
#include "CallQuantoOption.hpp"
#include "ForeignAsianOption.hpp"
#include "QuantoExchangeOption.hpp"
#include "ForeignPerfBasketOption.hpp"
#include <map>

using namespace std;

Option::Option()
{
}

Option::Option(InterestRateModel domesticInterestRate, TimeGrid monitoringTimeGrid)
{

    this->domesticInterestRate = domesticInterestRate;
    this->monitoringTimeGrid = monitoringTimeGrid;
    
}

Option::~Option()
{
}




double Option::computeDividends(const PnlMat* matrix, const PnlVect* perfDiv){


    PnlVect *row_i = pnl_vect_create(5);
    PnlVect *row_i_1 = pnl_vect_create(5);

    for (int i = 1; i<5; i++){

        pnl_mat_get_row(row_i, matrix, i);
        pnl_mat_get_row(row_i_1, matrix, i - 1);

        pnl_vect_minus(row_i, row_i_1); 
        pnl_vect_div_vect_term(row_i, row_i_1); 

        double perf_i = std::max(pnl_vect_min(row_i), 0);
        pnl_vect_set(perfDiv, i-1, perf_i);
    }

    pnl_vect_free(&row_i);
    pnl_vect_free(&row_i_1);

}


double Option::payOff(const PnlMat* matrix){

    return 0.0;
}

===== Option.hpp =====
#ifndef OPTION_HPP
#define OPTION_HPP

#include <iostream>
#include "pnl/pnl_vector.h"
#include "pnl/pnl_matrix.h"
#include "json_reader.hpp"
#include "InterestRateModel.hpp"
#include <vector> 
#include "TimeGrid.hpp"




class Option
{
public:

    InterestRateModel domesticInterestRate;
    TimeGrid monitoringTimeGrid;

public:
    Option();
    /**
     * Constructeur de parsing :
     */
    Option(InterestRateModel domesticInterestRate, TimeGrid monitoringTimeGrid);

    /**
     * Destructeur
     */
    ~Option();

    /**
     * Calcule la valeur du payoff
     *
     * @param[in] matrix est une matrice  de taille (dates + 1)*size
     *  ligne d'index i de la matrice continet la valeur de l'actif du sous-jacent à t = t_i
     */

    virtual double computeDividends(double t, const PnlMat* matrix);
    virtual double payOff(const PnlMat *matrix) = 0;
};


#endif





===== RiskyAsset.cpp =====
#include "RiskyAsset.hpp"

RiskyAsset::RiskyAsset()
{
}

RiskyAsset::RiskyAsset(InterestRateModel domesticInterestRate, double realVolatility, PnlVect* volatilityVector , int index):RiskyDynamics(0.0 , realVolatility , volatilityVector , index)
{
    this->domesticInterestRate = domesticInterestRate;
    this->drift =  domesticInterestRate.rate ;
}



RiskyAsset::~RiskyAsset()
{
}



===== InterestRateModel.cpp =====
#include "InterestRateModel.hpp"
#include <iostream>

InterestRateModel::InterestRateModel()
{
}


InterestRateModel::InterestRateModel(double r, std::string id) :rate(r) , id(id)
{
}

InterestRateModel::~InterestRateModel()
{
}

double InterestRateModel::discount(double t1, double t2)
{
    double value = std::exp(-rate*(t2 - t1));
    return value;
}

double InterestRateModel::account(double t1, double t2)
{
    double value = std::exp(rate*(t2 - t1));
    return value;
}


===== Currency.cpp =====
#include "Currency.hpp"

Currency::Currency()
{
}

Currency::Currency(InterestRateModel domesticInterestRate, InterestRateModel foreignInterestRate, double volatility, PnlVect* volatilityVector , int index):RiskyDynamics(0.0 , volatility , volatilityVector , index)
{
    this->domesticInterestRate = domesticInterestRate;
    this->foreignInterestRate = foreignInterestRate;
    this->drift = domesticInterestRate.rate ;
}




Currency::~Currency()
{
}



===== InterestRateModel.hpp =====
#ifndef _Interest_RateModel_HPP
#define _Interest_RateModel_HPP
#include <iostream>
#include <nlohmann/json.hpp>

class InterestRateModel {

public :
    double rate ; 
    std::string id ;

    InterestRateModel();
    InterestRateModel(double r , std::string id);
    ~InterestRateModel();


    double discount(double t1 , double t2);
    double account(double t1 , double t2);

};


#endif

===== pricing_server.cpp =====
#include <iostream>
#include <string>
#include <fstream>

#include <grpcpp/ext/proto_server_reflection_plugin.h>
#include <grpcpp/grpcpp.h>
#include <grpcpp/health_check_service_interface.h>
#include <nlohmann/json.hpp>

#include "pnl/pnl_matrix.h"
#include "pricing.grpc.pb.h"
#include "pricer.hpp"

using grpc::Server;
using grpc::ServerBuilder;
using grpc::ServerContext;
using grpc::Status;

PnlMat* convertPastToPnlMat(const PricingInput *input) {
    // Find size
    int m, n;
    m = input->past_size();
    if (m == 0) {
        return NULL;
    }
    n = input->past(0).value_size();
    for (int i = 0; i < input->past_size(); i++) {
        const PastLines &pastLine = input->past(i);
        if (pastLine.value_size() !=n) {
            std::cerr << "size mismatch in past" << std::endl;
            return NULL;
        }
    }
    // Parse data
    PnlMat *past = pnl_mat_create(m, n);
    for (int i = 0; i < input->past_size(); i++) {
        const PastLines &pastLine = input->past(i);
        for (int j = 0; j < pastLine.value_size(); j++) {
            MLET(past, i, j ) = pastLine.value(j);
        }
    }
    return past;
}

// Logic and data behind the server's behavior.
class GrpcPricerImpl final : public GrpcPricer::Service {
public:
    BlackScholesPricer &pricer;
    GrpcPricerImpl(BlackScholesPricer &pricer) : pricer(pricer) {}

    Status PriceAndDeltas(ServerContext *context, const PricingInput *input, PricingOutput *output) override {
        double price, priceStdDev;
        PnlVect *delta, *deltaStdDev;
        bool isMonitoringDate = input->monitoringdatereached();
        double currentDate = input->time();
        PnlMat *past = convertPastToPnlMat(input);
        if (past == NULL) {
            return Status(grpc::StatusCode::INVALID_ARGUMENT, "Cannot read past");
        }
        std::cout << "========== t = " << input->time() << "===========" << std::endl ; 
        pnl_mat_print(past);
        pricer.priceAndDeltas(past, currentDate, isMonitoringDate, price, priceStdDev, delta, deltaStdDev);
        output->set_price(price);
        output->set_pricestddev(priceStdDev);
        for (int i = 0; i < delta->size; i++) {
            output->add_deltas(GET(delta, i));
            output->add_deltasstddev(GET(deltaStdDev, i));
        }
        
        std::cout << "price = " << price << std::endl ;
        std::cout << "priceStdDev = " << priceStdDev << std::endl ;
        std::cout << "Deltas = " ;
        pnl_vect_print_asrow(delta);
        std::cout << "DeltasStdDev  = " ;
        pnl_vect_print_asrow(deltaStdDev);
        
        pnl_mat_free(&past);
        pnl_vect_free(&delta);
        pnl_vect_free(&deltaStdDev);
        return Status::OK;
    }

    Status Heartbeat(ServerContext *context, const Empty* input, ReqInfo *output) override {
        output->set_domesticinterestrate(pricer.model->interestRate);
        output->set_relativefinitedifferencestep(pricer.fdStep);
        output->set_samplenb(pricer.nSamples);
        return Status::OK;
    }
};

void RunServer(nlohmann::json &jsonParams) {
    std::string server_address("0.0.0.0:50051");
    BlackScholesPricer pricer(jsonParams);
    pricer.print();
    GrpcPricerImpl service(pricer);

    grpc::EnableDefaultHealthCheckService(true);
    grpc::reflection::InitProtoReflectionServerBuilderPlugin();
    ServerBuilder builder;
    // Listen on the given address without any authentication mechanism.
    builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());
    // Register "service" as the instance through which we'll communicate with
    // clients. In this case it corresponds to a *synchronous* service.
    builder.RegisterService(&service);
    // Finally assemble the server.
    std::unique_ptr<Server> server(builder.BuildAndStart());
    std::cout << "Server listening on " << server_address << std::endl;

    // Wait for the server to shutdown. Note that some other thread must be
    // responsible for shutting down the server for this call to ever return.
    server->Wait();
}

int main(int argc, char **argv) {
    if (argc != 2) {
        std::cout << "Exactly one argument is required." << std::endl;
        std::cout << "Usage: ./pricing_server math_params.json" << std::endl;
    }
    std::ifstream ifs(argv[1]);
    nlohmann::json jsonParams = nlohmann::json::parse(ifs);
    RunServer(jsonParams);

    return 0;
}

===== RiskyDynamics.hpp =====
#ifndef _Risky_Dynamics_HPP
#define _Risky_Dynamics_HPP

#include "pnl/pnl_vector.h"
#include "json_reader.hpp"

class  RiskyDynamics {

public : 
    int index ;
    double drift ;
    double realVolatility;
    PnlVect*  volatilityVector ;

    RiskyDynamics();
    RiskyDynamics(double dirft , double realVolatility , PnlVect* volatilityVector , int index);
    ~RiskyDynamics();
    void sampleNextDate(PnlMat* path , double step , const PnlVect* G  , int index_time , bool isMonitoringDate) ;
    void sampleNextDate(PnlMat *path, double step, const PnlVect *G, int index_time);
};


#endif 

===== GlobalModel.hpp =====
#ifndef Global_MODEL_HPP
#define Global_MODEL_HPP
#include "pnl/pnl_matvect.h"
#include "pnl/pnl_vector.h"
#include "pnl/pnl_matrix.h"
#include "pnl/pnl_random.h"
#include "json_reader.hpp"
#include "RiskyAsset.hpp"
#include "Currency.hpp"
#include "TimeGrid.hpp"
#include <iostream>
#include <vector>
#include <map>
#include "InterestRateModel.hpp"

class GlobalModel
{
public:
    // int model_size;       /// nombre d'actifs du modèle
    // PnlVect *volatility;  /// vecteur de volatilités
    // PnlVect *spots;       /// valeurs initiales des sous-jacents
    // double time_step;     /// time step = T / N


    PnlMat *L;            /// raccine carrée de matrice de corrélation
    PnlVect *G;           /// Vector for simulation
    std::vector<std::unique_ptr<Currency>>  currencies;
    InterestRateModel domesticInterestRate;
    std::vector<std::unique_ptr<RiskyAsset>> assets ;
    TimeGrid monitoringTimeGrid;
    int model_size ;
    int numberOfDaysPerYear;




public:
    GlobalModel();
    GlobalModel(const nlohmann::json json);
    ~GlobalModel();

    Currency*getCurrencyById(std::string id);

    /**
     * Génère une trajectoire du modèle et la stocke dans path (simulation conditionnelle)
     *
     * @param[out] path contient une trajectoire du modèle.
     * C'est une matrice de taille (N+1) x D
     * @param[in] past : matrice de taille (i+1)*D avec i last-index
     * @param[in] t  :  temps actuel
     * @param[in] path : matrice de taille (N+1)xD
     * @param[in] rng : génerateur des nombres aléatoires
     */
    void asset(const PnlMat *past, int t, PnlMat *path, PnlRng *rng);

    /**
     * simuler 2 trajectoires utilisant les mêmes aléas Browniens mais shiftées l’une par rapport à l’autre
     *
     * @param[in] d : index of colonne
     * @param[in] h : double
     * @param[in] path : matrice de taille (N + 1)*D qui contient la simulation du modéle
     * @param[in] t : current time 
     *
     */
    void shift_asset(int d, int t, double h, PnlMat *path);
};
#endif

===== json_reader.hpp =====
#pragma once

#include <nlohmann/json.hpp>
#include "pnl/pnl_vector.h"
#include "pnl/pnl_matrix.h"

void to_json(nlohmann::ordered_json &j, PnlVect *vect);
void to_json(nlohmann::json &j, PnlVect *vect);
void from_json(const nlohmann::json &j, PnlVect *&vect);
void from_json(const nlohmann::json &j, PnlMat *&mat);


===== GlobalModel.cpp =====
#include "GlobalModel.hpp"

GlobalModel::GlobalModel()
{
}

GlobalModel::~GlobalModel()
{
    pnl_vect_free(&G);
    pnl_mat_free(&L);
}


GlobalModel::GlobalModel(const nlohmann::json json)
{

    // ====== monitoringTimeGrid === 

    monitoringTimeGrid = createTimeGridFromJson(json);
    
    // ==== Correlations and matrice cholesky :  ==== 

    json.at("Correlations").get_to(L);
    pnl_mat_chol(L);

    model_size = L->n;
    
    // pnl_mat_print(C);

    // L = pnl_mat_create(model_size , model_size);
    // for (int i = 0; i < model_size; i++)
    //     pnl_mat_set_diag(L, 1.0, i);
    
    // pnl_mat_print(L);
    // pnl_mat_print(L);

    // ====== numberOfDaysPerYear ===== 
    numberOfDaysPerYear = json.at("NumberOfDaysInOneYear").get<int>();

    // ===== vecteur of simulation G : ===== 
    G = pnl_vect_create_from_double(model_size , 0.0);

    // ================== Currencies ============== 

    PnlVect* volatilityVector = pnl_vect_create_from_double(model_size , 0.0);

    std::string domesticCurrencyId;
    json.at("DomesticCurrencyId").get_to(domesticCurrencyId);

    int index = 0 ;
    auto jsonCurrencies = json.at("Currencies");
    int assetNb = model_size - (jsonCurrencies.size() - 1);
    
    for (auto jsonCurrency : jsonCurrencies) {

        std::string currencyId(jsonCurrency.at("id").get<std::string>());
        double rf = jsonCurrency.at("InterestRate").get<double>();
        double realVolatility = jsonCurrency.at("Volatility").get<double>();

        if(currencyId == domesticCurrencyId) {
            this->domesticInterestRate = InterestRateModel(rf , currencyId);
        } else {

            pnl_mat_get_row(volatilityVector , L , assetNb + index);
            pnl_vect_mult_scalar(volatilityVector , realVolatility);
        
            currencies.push_back(std::make_unique<Currency>(domesticInterestRate , InterestRateModel(rf , currencyId) , realVolatility , volatilityVector , assetNb + index));
        
            index++;
        }    
    }

    // ================== Assets ============== 

    int index_asset = 0 ;
    auto jsonAssets = json.at("Assets");
    
    for (auto jsonAsset : jsonAssets) {

        std::string currencyId(jsonAsset.at("CurrencyId").get<std::string>());
        double realVolatility = jsonAsset.at("Volatility").get<double>();
        
        if(currencyId == domesticCurrencyId) {
            pnl_mat_get_row(volatilityVector , L , index_asset);
            pnl_vect_mult_scalar(volatilityVector , realVolatility);
            assets.push_back(std::make_unique<RiskyAsset>(domesticInterestRate , realVolatility , volatilityVector , index_asset));

        } else {

            Currency* currencyOfAsset = getCurrencyById(currencyId); 

            pnl_mat_get_row(volatilityVector , L , index_asset);
            pnl_vect_mult_scalar(volatilityVector , realVolatility);
            pnl_vect_plus_vect(volatilityVector , currencyOfAsset->volatilityVector);

            double real_vol = pnl_vect_norm_two(volatilityVector);

            assets.push_back(std::make_unique<RiskyAsset>(domesticInterestRate , real_vol, volatilityVector , index_asset));
        }




        index_asset++;

    }






    pnl_vect_free(&volatilityVector);


}


Currency* GlobalModel::getCurrencyById(std::string id) {
    for (const auto& curr : currencies)
    {
        if(curr->foreignInterestRate.id == id) {
            return curr.get();
        }
    }

    return nullptr;
    
}





void GlobalModel::asset(const PnlMat *past, int t, PnlMat *path, PnlRng *rng)
{

    
    int last_index = monitoringTimeGrid.getLastIndex(t);

    if (last_index ==  monitoringTimeGrid.len() - 1)
    {
        pnl_mat_extract_subblock(path, past, 0, path->m, 0, path->n);
        return;
    }


    pnl_mat_set_subblock(path, past, 0, 0);
    pnl_vect_rng_normal(G, model_size, rng);
    double step = (monitoringTimeGrid.at(last_index + 1) - t)  / (double)numberOfDaysPerYear ;
    bool isMonitoringDate = monitoringTimeGrid.has(t);

    for (const auto& risky_asset : assets)
    {
        risky_asset->sampleNextDate(path , step , G , last_index + 1 , isMonitoringDate);
    }

    for (const auto& currency : currencies)
    {
        currency->sampleNextDate(path , step , G , last_index + 1 , isMonitoringDate);
    }



    for (size_t i = last_index + 2; i < monitoringTimeGrid.len() ; i++)
    {

        step = (monitoringTimeGrid.at(i)  - monitoringTimeGrid.at(i - 1)) / (double)numberOfDaysPerYear;
        pnl_vect_rng_normal(G, model_size, rng);

        for (const auto& risky_asset : assets)
        {
            risky_asset->sampleNextDate(path , step , G , i);
        }

        for (const auto& currency : currencies)
        {
            currency->sampleNextDate(path , step , G , i);
        }

    }

}



void GlobalModel::shift_asset(int d, int t, double h, PnlMat *path)
{

    int last_index;
    
    if(monitoringTimeGrid.has(t)) {
        last_index = monitoringTimeGrid.getLastIndex(t);
    } else {
        last_index = monitoringTimeGrid.getLastIndex(t) + 1 ;
    }

    
    for (int i = last_index ; i < path->m; i++)
    {
        MLET(path, i, d) *= h;
    };
}


===== Currency.hpp =====
#ifndef _Currency_HPP
#define _Currency_HPP

#include "json_reader.hpp"
#include "InterestRateModel.hpp"
#include "RiskyDynamics.hpp"

class  Currency : public RiskyDynamics {

public : 
    InterestRateModel domesticInterestRate;
    InterestRateModel foreignInterestRate;
    Currency();
    Currency(InterestRateModel domesticInterestRate , InterestRateModel foreignInterestRate , double volatility , PnlVect* volatilityVector , int index);
    ~Currency();


};


#endif 

===== TimeGrid.hpp =====
#ifndef _TIME_GRID_HPP
#define _TIME_GRID_HPP


#include <nlohmann/json.hpp>
#include <vector>
#include <iostream>

class TimeGrid {



public : 

    std::vector<double> grid_time;
    TimeGrid();
    ~TimeGrid();
    TimeGrid(nlohmann::json json);
    int at(int index);
    int len();
    int getLastIndex(double t);

};



/**
 * return la classe de TimeGrid selon TimeGridType :
 */
extern TimeGrid createTimeGridFromJson(const nlohmann::json json);


#endif 

===== TimeGrid.cpp =====
#include "TimeGrid.hpp"
#include <nlohmann/json.hpp>
#include <iostream>
#include "FixedTimeGrid.hpp"
#include "GridTimeGrid.hpp"


TimeGrid::TimeGrid()
{
}

TimeGrid::~TimeGrid()
{
}

TimeGrid::TimeGrid(std::vector<double> grid_time)
{
    this->grid_time = grid_time;

}


int TimeGrid::at(int index)
{
    if(index >= grid_time.size()) {
        std::cout << "bad index : index must be less then size" << std::endl ;
        std::exit(1);
    }
    return this->grid_time.at(index);
}


int TimeGrid::len()
{
    return grid_time.size();
}



int TimeGrid::getLastIndex(double t)
{
    for (int i = 0; i < grid_time.size(); i++)
    {
        if(std::fabs(grid_time.at(i) - t) < 1E-10) {
            return i;
        }
    }
    
    return grid_time.size() - 1;
}




