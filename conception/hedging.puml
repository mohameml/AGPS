@startuml Hedging 


package FinancialEstimator {

    class VolatilityEstimator {
        + trading_days_per_year
        + estimate_volatility(list_price : List[float],  annualize: bool = True  )
    }


    class CorrelationMatrixEstimator {
        + estimate_correlation_matrix(list_prices: np.ndarray) -> np.ndarray
    }

    class RiskFreeRateEstimator {
        + mean_estimate(r_t : List[float])
    }

    class FinancialEstimator {
        + volatilityEstimator 
        + riskFreeEstimator 
        + corrMatrixEstimator 
    }

    FinancialEstimator o-- VolatilityEstimator
    FinancialEstimator o-- RiskFreeRateEstimator    
    FinancialEstimator o-- CorrelationMatrixEstimator

}


package FinancialParam  {

    
    class DataFeed {
        + DateTime Date 
        + Dictionary<string , IndexPrice> IndexPrices
        + Dictionary<string , ExchangeRate> ExchangeRates 
    }

    class ListDataFeed {
    
        + dataFeeds = [] 
        + Dict[str , float] dict_estimate_rf 
        
        + addDataFeed()
    }


    class FinancialParams {
        + marketDataReader
        + assetDescription 
        + formuleDescription

        + to_json(file)
    }

    class AssetDescription {

        + assets 
        + currencies 
        + financialEstimator
    
    }

    class Asset {
        + id 
        + volatility 
        + rate 
    }

    class Currency {
        + id 
        + volatility 
        + rate 
    }


    class FormuleDescription {
        
        + creationDate  
        +  converter : MathDateConverter
        +  paymentDates 
        + maturity = T 
        + time_grid = [] 
    }

    FinancialParams o-- AssetDescription
    FinancialParams o-- FormuleDescription
    
    AssetDescription o-- Asset 
    AssetDescription o-- Currency

    ListDataFeed    o-- DataFeed


}


package MarketDataReader {
    
    enum IndexeEnum {

        + EUROSTOXX50 = "EUROSTOXX50"
        + SP500 = "SP500"
        + FTSE100 = "FTSE100"
        + T+ OPIX = "TOPIX"
        + ASX200 = "ASX200"        
    }

    enum CurrencyEnum {
        
        + EUR = "EUR"
        + USD = "USD"
        + GBP = "GBP"
        + JPY = "JPY"
        + AUD = "AUD"
    }


    class MarketDataReader {
        + string FilePath 
        + List<EnumIndex> Indexes
        + Date T0
        + Date T 
        ' + DataIndexPrice : DataFrame 
        ' + DataExchangeRate : DataFrame
        ' + DataInterestRate : DataFrame
        + ExchangeRateHistory _ExchangeRatesHistory
        + IndexPriceHistory _IndexPriceHistory
        + InterestRateHistory _InterestRateHistory
        + Dictionary<DateTime ,int>  numberOfDaysInOneYear
        + MarketDataReader(string filePath , List<EnumIndex> indexes , Date T0 , Date T)
        + ExtractDataIndexPrice()
        + ExtractDataInterestRate()
        + ExtractDataExchangeRate()
        + GetDataFeed(DateTime date)
    
    }

    MarketDataReader *-- IndexPriceHistory
    MarketDataReader *-- InterestRateHistory
    MarketDataReader *-- ExchangeRateHistory

    class IndexPrice {
        + string IndexName
        + string Currency 
        + double Price 

    }

    class IndexPriceList {        
        + List<IndexPrice> PriceList 
    }


    class IndexPriceHistory {
        + Dictionary<DateTime , IndexPriceList> IndexPriceRecords
    }

    IndexPriceList *-- IndexPrice
    IndexPriceHistory *-- IndexPriceList


    class InterestRate {
        + string Currency   
        + double Rate
    }

    class InterestRateList {
        + List<InterestRate> Rates  
    }

    class InterestRateHistory {
        + Dictionary<DateTime , InterestRateList> InterestRateRecords
    }

    InterestRateHistory *-- InterestRateList
    InterestRateList *-- InterestRate


    class ExchangeRate {
        + CurrencyEnum BaseCurrency 
        + CurrencyEnum TargetCurrency = "EUR"
        + double Rate 
    }

    class ExchangeRateList {
        + List<ExchangeRate> Rates 
    }

    class ExchangeRateHistory {
        + Dictionary<DateTime , ExchangeRateList> ExchangeRateRecords
    }

    ExchangeRateHistory *-- ExchangeRateList
    ExchangeRateList *-- ExchangeRate
}


package Utils {

    class MathDateConverter {
        + T0 
        + workingDaysPerYear 
        + double ConvertToMathDistance(Date from , Date to)
    }

}



package PricingEngin {

    abstract class Pricer {
        + FinancialParams Params
        + abstract PricingResults PriceAndDeltas(PricingParams pricingParams ) 
    }

    class PricingParams {
        +  List<DataFeed> DataFeeds
        + double Time 
        + bool MonitoringDate
    }

    class  PricingResults {
        + Dictionary<string , double> Deltas 
        + Dictionary<string , double> DeltasStdDev 
        + double Price 
        + double PriceStdDev 
    }  

    Pricer o-- PricingParams
    Pricer o-- PricingResults


    class PricerGrpc {
        - GrpcPricer.GrpcPricerClient GrpcClient
        + PricerGrpc(TestParameters testParameters , string adress)
        + override PricingResults PriceAndDeltas(PricingParams pricingParams)

    }

    Pricer <|-- PricerGrpc 
}


package HedginigEngine {

    class Portfolio {
        + Double Cash 
        + Dictionary<string, double> Compositions
        + DateTime date 
        + void UpdateCompo(Dictionary<string, double> Compos ,  DataFeed feed)
        + double GetPortfolioValue(DataFeed feed)
    }

    abstract class  Rebalacing  {
        + bool IsRebalancing(DateTime date)
    }

    class FixedRebalacing {
        - int Count 
        - int Periode 
        + override bool IsRebalancing(DateTime date)
    }

    Rebalacing <|-- FixedRebalacing

    class Hedging {
        + TestParameters Params 
        + Pricer Pricer 
        + Rebalacing DetectRebalacing
        + List<DataFeed> MarketData 

        + List<OutputData> Hedge()
    }

    Hedging o-- Portfolio 
    Hedging o-- Rebalacing 


}



' package Grpc {

'     class GrpcPricer {
'         + PricingOutput PriceAndDeltas(PricingInput)
'     }

'     class PricingInput {
'         + PastLines[] past 
'         + double[] vols 
'         + double[][] correlations
'         + double[]  PaymentDates
'         + double[] Dividendes
'         + Currency[] Currencies
'         + double[] InterestRates
'         + double[] ExchangeRates
'         + int NumberOfDaysInOneYear
'         + bool monitoringDateReached
'         + double time 
'     }

'     class PastLines {
'         + double[] value 
'     }

'     class Currency {
'         + string id 
'         + double InterestRate
'         + double volatility 
'     }

'     class PricingOutput {
'         + double price 
'         + double[] deltas 
'         + double priceStdDev 
'         + double[] deltasStdDev
'     }

'     GrpcPricer o-- PricingInput 
'     GrpcPricer o-- PricingOutput 

'     PricingInput o-- PastLines 


' }






' Pricer o-- FinancialParam

' FinancialParam o-- MarketDataReader
' FinancialParam o-- FinancialEstimator

' HedginigEngine o-- Pricer 
' HedginigEngine o-- MarketDataReader

Pricer <|-- FinancialParam

FinancialParams <|-- MarketDataReader
FinancialParams <|-- FinancialEstimator

Hedging <|-- Pricer 
Hedging <|-- MarketDataReader





@enduml